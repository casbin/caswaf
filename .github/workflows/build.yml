name: Build

on: [push, pull_request]

jobs:

  go-tests:
    name: Running Go tests
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_DATABASE: casdoor
          MYSQL_ROOT_PASSWORD: 123456
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '1.20.0'
          cache-dependency-path: ./go.mod
      - name: Tests
        run: |
        # go test -v $(go list ./...) -tags skipCi
        working-directory: ./

  frontend:
    name: Front-end
    runs-on: ubuntu-latest
    needs: [ go-tests ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'yarn'
          cache-dependency-path: ./web/yarn.lock
      - run: yarn install && CI=false yarn run build
        working-directory: ./web

  backend:
    name: Back-end
    runs-on: ubuntu-latest
    needs: [ go-tests ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '1.20.0'
          cache-dependency-path: ./go.mod
      - run: go version
      - name: Build
        run: |
          go build -race -ldflags "-extldflags '-static'"
        working-directory: ./

  release-and-push:
    name: Release And Push
    runs-on: ubuntu-latest
    if: github.repository == 'casbin/caswaf' && github.event_name == 'push'
    needs: [ frontend, backend]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: -1

      - name: Create Tag with Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Decide Should_Push Or Not
        id: should_push
        run: |
          old_version=${{ steps.semantic.outputs.last_release_version }}
          new_version=${{ steps.semantic.outputs.new_release_version }}

          old_array=(${old_version//\./ })
          new_array=(${new_version//\./ })

          if [ ${old_array[0]} != ${new_array[0]} ]
          then 
              echo ::set-output name=push::'true'
          elif [ ${old_array[1]} != ${new_array[1]} ]
          then 
              echo ::set-output name=push::'true'
          else
              echo ::set-output name=push::'false'
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        if: github.repository == 'casbin/caswaf' && github.event_name == 'push' && steps.should_push.outputs.push=='true'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v3
        if: github.repository == 'casbin/caswaf' && github.event_name == 'push' && steps.should_push.outputs.push=='true'
        with:
          context: .
          target: STANDARD
          platforms: linux/amd64
          push: true
          tags: casbin/caswaf:${{ steps.semantic.outputs.new_release_version }},casbin/caswaf:latest